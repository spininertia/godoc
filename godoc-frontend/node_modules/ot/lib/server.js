if (typeof ot === 'undefined') {
  var ot = {};
}

ot.Server = (function (global) {
  'use strict';

  // Constructor. Takes the current document as a string and optionally the array
  // of all operations.
  function Server (document, operations) {
    this.document = document;
    this.operations = operations || [];
  }

  // Call this method whenever you receive an operation from a client.
  Server.prototype.receiveOperation = function (revision, operation, o, option, cb) {
    if (revision < 0 || this.operations.length < revision) {
      throw new Error("operation revision not in history");
    }
    console.log("receiveOperation : " + "[" + operation + "]");
    // Find all operations that the client didn't know of when it sent the
    // operation ...
    var concurrentOperations = this.operations.slice(revision);

    // ... and transform the operation against all these operations ...
    var transform = operation.constructor.transform;
    for (var i = 0; i < concurrentOperations.length; i++) {
      operation = transform(operation, concurrentOperations[i])[0];
    }

    var http = require("http");
    var o = this;
    var tmp = operation.apply(o.document);
    var qs = require('querystring');
    var q = JSON.parse(JSON.stringify(option));
    q['path'] = option['path'] + '?' + qs.stringify({'seq': option['seq'], 'op':'dummy', 'doc':tmp});
    console.log('Option is :%j', option);
    var req = http.request(q, function(res) {
        res.on('data', function (chunk) {
            console.log('get response: ' + res.statusCode);
            // ... and apply that on the document.
            o.document = tmp;
            // Store operation in history.
            o.operations.push(operation);

            // It's the caller's responsibility to send the operation to all connected
            // clients and an acknowledgement to the creator.
            cb(operation, o);
        });
    }).on('error', function(e) {
      console.log("Got error: " + e.message);
    });
      req.end();
  };

  return Server;

}(this));

if (typeof module === 'object') {
  module.exports = ot.Server;
}
